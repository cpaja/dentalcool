# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2017-11-16 02:56
from __future__ import unicode_literals

import apps.sad.managers
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('params', '0001_initial'),
        ('auth', '0007_alter_validators_add_error_messages'),
        ('space', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_headquar_id', models.CharField(blank=True, max_length=50, null=True)),
                ('last_module_id', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='params.Person', verbose_name='Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'permissions': (('user', 'Can ALL user'),),
            },
            managers=[
                ('objects', apps.sad.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('INPUT', 'Input'), ('OUTPUT', 'Output')], default='INPUT', max_length=50, verbose_name='Access type')),
                ('ip', models.CharField(blank=True, max_length=50, null=True, verbose_name='IP')),
                ('session_key', models.TextField(blank=True, null=True, verbose_name='Session key')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Access',
                'verbose_name_plural': 'Accesses',
                'permissions': (('access', 'Can ALL access'),),
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=50, verbose_name='File name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('size', models.CharField(blank=True, max_length=50, null=True, verbose_name='Size')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
                'permissions': (('backup', 'Can ALL backup'),),
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.CharField(choices=[('PRO', 'Profesional'), ('WEB', 'Web informativa'), ('VENTAS', 'Ventas'), ('BACKEND', 'Backend Manager'), ('HOTEL', 'Hotel')], default='BACKEND', max_length=50, verbose_name='Module')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('url', models.CharField(default='#', max_length=150)),
                ('pos', models.IntegerField(default=1, verbose_name='Position')),
                ('icon', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Icon')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sad.Menu', verbose_name='Parent')),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
                'permissions': (('menu', 'Can ALL menu'),),
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.CharField(choices=[('PRO', 'Profesional'), ('WEB', 'Web informativa'), ('VENTAS', 'Ventas'), ('BACKEND', 'Backend Manager'), ('HOTEL', 'Hotel')], default='BACKEND', max_length=50, verbose_name='Module')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('icon', models.CharField(blank=True, max_length=50, null=True, verbose_name='Icon')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('groups', models.ManyToManyField(blank=True, null=True, related_name='module_set', to='auth.Group', verbose_name='Groups')),
                ('initial_groups', models.ManyToManyField(blank=True, null=True, related_name='initial_groups_module_set', to='auth.Group', verbose_name='Initial groups')),
                ('solutions', models.ManyToManyField(blank=True, null=True, to='space.Solution', verbose_name='Solutions')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['-id'],
                'permissions': (('module', 'Can ALL module'),),
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=150, null=True, verbose_name='Text')),
                ('row', models.IntegerField(default=1, verbose_name='Row')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'permissions': (('ticket', 'Can ALL ticket'),),
            },
        ),
        migrations.CreateModel(
            name='UserAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='space.Association', verbose_name='Association')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'User association',
                'verbose_name_plural': 'User association',
                'db_table': 'sad_user_association',
            },
        ),
        migrations.CreateModel(
            name='UserEnterprise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='space.Enterprise', verbose_name='Enterprise')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'User enterprise',
                'verbose_name_plural': 'User enterprises',
                'db_table': 'sad_user_enterprise',
            },
        ),
        migrations.CreateModel(
            name='UserHeadquar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='group')),
                ('headquar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='space.Headquar', verbose_name='Headquar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'User headquar',
                'verbose_name_plural': 'User headquars',
                'db_table': 'sad_user_headquar',
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ON', 'Activate'), ('OFF', 'Deactivate')], default='ON', max_length=50, verbose_name='Status')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User status',
                'verbose_name_plural': 'User statuses',
                'db_table': 'sad_user_status',
            },
        ),
        migrations.AlterUniqueTogether(
            name='module',
            unique_together=set([('module', 'name')]),
        ),
    ]
